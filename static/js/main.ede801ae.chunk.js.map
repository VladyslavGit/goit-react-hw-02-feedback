{"version":3,"sources":["components/feedbackOptions/FeedbackOptions.module.css","components/feedbackOptions/FeedbackOptions.js","components/statistic/Statistic.js","components/App.js","index.js","components/App.module.css"],"names":["module","exports","FeedbackOption","handleIncrement","className","styles","button","type","name","onClick","e","target","Statistic","positivePercentage","good","neutral","bad","total","App","state","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","mainBox","this","Component","ReactDOM","render","document","getElementById"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,OAAS,kC,kKCiCZC,MA/Bf,YAA8C,IAApBC,EAAmB,EAAnBA,gBACxB,OACE,oCACE,4BACEC,UAAWC,IAAOC,OAClBC,KAAK,SACLC,KAAK,OACLC,QAAS,SAAAC,GAAC,OAAIP,EAAgBO,EAAEC,OAAOH,QAJzC,QAQA,4BACEJ,UAAWC,IAAOC,OAClBC,KAAK,SACLC,KAAK,UACLC,QAAS,SAAAC,GAAC,OAAIP,EAAgBO,EAAEC,OAAOH,QAJzC,WAQA,4BACEJ,UAAWC,IAAOC,OAClBC,KAAK,SACLC,KAAK,MACLC,QAAS,SAAAC,GAAC,OAAIP,EAAgBO,EAAEC,OAAOH,QAJzC,SCSSI,EA5BG,SAAC,GAOZ,IANLC,EAMI,EANJA,mBACAC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,IACAC,EAEI,EAFJA,MACAd,EACI,EADJA,gBAEA,OACE,oCACE,qDACA,kBAAC,EAAD,CAAgBA,gBAAiBA,IACjC,yCACCU,EACC,oCACE,mCAASC,GACT,sCAAYC,GACZ,kCAAQC,GACR,oCAAUC,GACV,gDAAsBJ,EAAtB,MAGF,kD,gBCeOK,E,4MAnCbC,MAAQ,CACNL,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEPb,gBAAkB,SAAAK,GAChB,EAAKY,UAAS,SAAAC,GACZ,OAAO,eACJb,EAAOa,EAAUb,GAAQ,O,EAIhCc,mBAAqB,WACnB,OAAO,EAAKH,MAAML,KAAO,EAAKK,MAAMJ,QAAU,EAAKI,MAAMH,K,EAE3DO,gCAAkC,WAChC,OAAOC,KAAKC,MACgC,KAAxC,EAAKN,MAAML,KAAO,EAAKK,MAAMJ,UAC5B,EAAKI,MAAML,KAAO,EAAKK,MAAMJ,QAAU,EAAKI,MAAMH,O,uDAIvD,OACE,yBAAKZ,UAAWC,IAAOqB,SACrB,kBAAC,EAAD,iBACMC,KAAKR,MADX,CAEEF,MAAOU,KAAKL,qBACZT,mBAAoBc,KAAKJ,kCACzBpB,gBAAiBwB,KAAKxB,wB,GA7BdyB,aCAlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,kBCHjDhC,EAAOC,QAAU,CAAC,QAAU,wB","file":"static/js/main.ede801ae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__2VvWv\"};","import React from \"react\";\r\nimport styles from \"./FeedbackOptions.module.css\";\r\n\r\nfunction FeedbackOption({ handleIncrement }) {\r\n  return (\r\n    <>\r\n      <button\r\n        className={styles.button}\r\n        type=\"button\"\r\n        name=\"good\"\r\n        onClick={e => handleIncrement(e.target.name)}\r\n      >\r\n        Good\r\n      </button>\r\n      <button\r\n        className={styles.button}\r\n        type=\"button\"\r\n        name=\"neutral\"\r\n        onClick={e => handleIncrement(e.target.name)}\r\n      >\r\n        Neutral\r\n      </button>\r\n      <button\r\n        className={styles.button}\r\n        type=\"button\"\r\n        name=\"bad\"\r\n        onClick={e => handleIncrement(e.target.name)}\r\n      >\r\n        Bad\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FeedbackOption;\r\n","import React from \"react\";\r\nimport FeedbackOption from \"../feedbackOptions/FeedbackOptions\";\r\n\r\nconst Statistic = ({\r\n  positivePercentage,\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  handleIncrement\r\n}) => {\r\n  return (\r\n    <>\r\n      <h2>Please leave feedback</h2>\r\n      <FeedbackOption handleIncrement={handleIncrement} />\r\n      <h2>Statistic</h2>\r\n      {positivePercentage ? (\r\n        <>\r\n          <p>Good {good}</p>\r\n          <p>Neutral {neutral}</p>\r\n          <p>Bad {bad}</p>\r\n          <p>Total {total}</p>\r\n          <p>Positive feedback {positivePercentage}%</p>\r\n        </>\r\n      ) : (\r\n        <p>No feedback given</p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Statistic;\r\n","import React, { Component } from \"react\";\r\nimport Statistic from \"./statistic/Statistic\";\r\nimport styles from \"./App.module.css\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0\r\n  };\r\n  handleIncrement = name => {\r\n    this.setState(prevState => {\r\n      return {\r\n        [name]: prevState[name] + 1\r\n      };\r\n    });\r\n  };\r\n  countTotalFeedback = () => {\r\n    return this.state.good + this.state.neutral + this.state.bad;\r\n  };\r\n  countPositiveFeedbackPercentage = () => {\r\n    return Math.round(\r\n      ((this.state.good + this.state.neutral) * 100) /\r\n        (this.state.good + this.state.neutral + this.state.bad)\r\n    );\r\n  };\r\n  render() {\r\n    return (\r\n      <div className={styles.mainBox}>\r\n        <Statistic\r\n          {...this.state}\r\n          total={this.countTotalFeedback()}\r\n          positivePercentage={this.countPositiveFeedbackPercentage()}\r\n          handleIncrement={this.handleIncrement}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainBox\":\"App_mainBox__2pPqK\"};"],"sourceRoot":""}